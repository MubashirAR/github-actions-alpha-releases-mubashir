name: Publish Pre-release

on: 
  # push: 
  #   branches: 
  #     - master
  workflow_dispatch:
  workflow_call:
    inputs:
      COMMENT_REF:
        type: string
    
# on:
#   workflow_run:
#     workflows: [cleanup]
#     types: 
#       - completed
#     branches:
#       - alpha
#       - master

jobs:
  set-pr-status:
      runs-on: ubuntu-latest
      if: false
      steps:
        - id: pr-details
          uses: juztcode/action-get-merged-pull-request@1.0.0
          env:
            # Default Github Token
            token: ${{ secrets.GITHUB_TOKEN }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        - name: Echo PR number
          run: echo ${{ steps.pr-details.outputs.head_branch }} ${{ steps.pr-details.outputs.base_branch }}
        - name: first
          run: ${{ toJson(github) }} ${{ toJson(job) }} ${{ toJson(env) }}
        - name: Set PR Context Status to Pending
          uses: gpuliyar/pr-status-action@v1.0.0
          with:
            # Repository name (Mandatory)
            repository: ${{ github.action_repository }}

            # PR Number  (Mandatory)
            pr-number: ${{ steps.pr-details.outputs.head_branch }}

            # Name the context to use in the PR  (Mandatory)
            context: cool-context

            # State to apply (Mandatory)
            # Any of the (error | failure | pending | success) states
            state: failure

            # A short description of the status (Mandatory)
            description: This is so awesome to use a context in a PR

            # The target URL to associate with the Context Status (Optional)
            # This Github UI will link the URL (source of status) to the Context.
            target_url: https://nice-url.gpuliyar.com

          env:
            # Default Github Token
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  check-pr-exists:
    name: Check PR exists
    runs-on: ubuntu-latest
    steps:
      - name: Check if PR exists
        id: get-pr-exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prs=$(gh pr list \
              --repo "$GITHUB_REPOSITORY" \
              --head "$GITHUB_REF_NAME" \
              --base 'master' \
              --json title \
              --jq 'length')
          if ((prs > 0)); then
              echo "exists=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Check if PR exists
        id: check-pr-exists
        if: ${{ !steps.get-pr-exists.outputs.exists}}
        run: |
          echo "ERROR: This workflow requires a PR to exist"
          exit 1
  release:
    name: Generate and publish pre-release version
    needs: check-pr-exists
    runs-on: ubuntu-latest
    steps:
      # - name: Get PR branch
      #   uses: xt0rted/pull-request-comment-branch@v1
      #   id: comment-branch

      - name: Checkout code
        uses: actions/checkout@v3
        # with:
          # ref: ${{ steps.comment-branch.outputs.head_ref }}
          # fetch-depth: 0
          # fetch-tags: true

      - name: test
        run: git branch && echo "$GITHUB_REF_NAME [ref]${{ github.ref }} [refs] [1]${{ github.head_ref }} [2]${{ github.base_ref }} [wf_ref] ${{ github.workflow_ref }} [refname] ${{ github.ref_name }}"


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Add PR check
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
              github.checks.create({
              name: 'Pending pre-release versions',
              head_sha: '${{ github.head_ref || github.ref_name }}',
              status: 'in_progress',
              output: {
                  title: 'Pending pre-release versions',
                  summary: 'There are some pending pre-release versions that need to be deleted. Please run cleanup manually'
              },
              owner: context.repo.owner,
              repo: context.repo.repo
              })
      # - name: Semantic Release
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     # COMMENT_REF: ${{ steps.comment-branch.outputs.head_ref }}
      #     # GITHUB_REF_NAME: ${{ steps.comment-branch.outputs.head_ref }}
      #   run: npx semantic-release
  cleanup:
    name: Cleanup old versions
    needs: release
    uses: ./.github/workflows/cleanup.yml
    with:
      min-version-to-keep: 1

